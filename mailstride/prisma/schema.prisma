// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Plan {
  FREE
  PRO
  BUSINESS
  ENTERPRISE
}

enum EmailStatus {
  DRAFT
  SCHEDULED
  SENDING
  SENT
  FAILED
}

enum AutomationType {
  WELCOME
  DRIP
  TRIGGER
  SEQUENCE
}

enum PublicationRole {
  OWNER
  ADMIN
  EDITOR
  VIEWER
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  plan          Plan      @default(FREE)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  accounts      Account[]
  sessions      Session[]
  ownedPublications Publication[] @relation("ownedPublications")
  publicationMembers PublicationMember[]
}

model Publication {
  id          String   @id @default(cuid())
  name        String
  description String?
  slug        String   @unique
  audience    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  ownerId     String
  owner       User     @relation("ownedPublications", fields: [ownerId], references: [id], onDelete: Cascade)
  members     PublicationMember[]
  subscribers Subscriber[]
  newsletters Newsletter[]
  automations Automation[]

  @@index([ownerId])
}

model Email {
  id            String      @id @default(cuid())
  subject       String
  content       String      @db.Text
  design        String?     @db.Text
  status        EmailStatus @default(DRAFT)
  sentAt        DateTime?
  scheduledFor  DateTime?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  // Relations
  newsletterId  String
  newsletter    Newsletter  @relation(fields: [newsletterId], references: [id], onDelete: Cascade)
  analytics     EmailAnalytics?
  audience      EmailAudience?
  automationEmails AutomationEmail[]

  @@index([newsletterId])
  @@index([status])
}

model EmailAudience {
  id            String    @id @default(cuid())
  type          AudienceType
  emailList     String[]  // Array of email addresses
  segment       Json?     // For storing segment criteria
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  emailId       String    @unique
  email         Email     @relation(fields: [emailId], references: [id], onDelete: Cascade)

  @@index([type])
}

enum AudienceType {
  ALL_SUBSCRIBERS
  MANUAL_LIST
  CSV_IMPORT
  SEGMENT
}

model EmailAnalytics {
  id            String    @id @default(cuid())
  opens         Int       @default(0)
  uniqueOpens   Int       @default(0)
  clicks        Int       @default(0)
  uniqueClicks  Int       @default(0)
  bounces       Int       @default(0)
  complaints    Int       @default(0)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  emailId       String    @unique
  email         Email     @relation(fields: [emailId], references: [id], onDelete: Cascade)
  clickEvents   ClickEvent[]
  openEvents    OpenEvent[]

  @@index([emailId])
}

model ClickEvent {
  id            String   @id @default(cuid())
  url           String
  timestamp     DateTime @default(now())
  
  // Relations
  analyticsId   String
  analytics     EmailAnalytics @relation(fields: [analyticsId], references: [id], onDelete: Cascade)
  subscriberId  String
  subscriber    Subscriber @relation(fields: [subscriberId], references: [id], onDelete: Cascade)

  @@index([analyticsId])
  @@index([subscriberId])
  @@index([timestamp])
  @@index([url])
}

model OpenEvent {
  id            String   @id @default(cuid())
  timestamp     DateTime @default(now())
  
  // Relations
  analyticsId   String
  analytics     EmailAnalytics @relation(fields: [analyticsId], references: [id], onDelete: Cascade)
  subscriberId  String
  subscriber    Subscriber @relation(fields: [subscriberId], references: [id], onDelete: Cascade)

  @@index([analyticsId])
  @@index([subscriberId])
  @@index([timestamp])
}

model Subscriber {
  id          String   @id @default(cuid())
  email       String
  name        String?
  metadata    Json?    // For custom fields
  subscribed  Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  publicationId String
  publication  Publication @relation(fields: [publicationId], references: [id], onDelete: Cascade)
  clickEvents  ClickEvent[]
  openEvents   OpenEvent[]
  tags         Tag[]

  @@unique([email, publicationId])
  @@index([publicationId])
  @@index([email])
  @@index([subscribed])
  @@index([createdAt])
}

model Tag {
  id          String   @id @default(cuid())
  name        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  subscribers Subscriber[]

  @@unique([name])
}

model Automation {
  id          String        @id @default(cuid())
  name        String
  type        AutomationType
  active      Boolean       @default(true)
  settings    Json          // For automation-specific settings
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relations
  publicationId String
  publication  Publication @relation(fields: [publicationId], references: [id], onDelete: Cascade)
  emails       AutomationEmail[]

  @@index([publicationId])
  @@index([type])
  @@index([active])
}

model AutomationEmail {
  id            String   @id @default(cuid())
  order         Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  automationId  String
  automation    Automation @relation(fields: [automationId], references: [id], onDelete: Cascade)
  emailId       String
  email         Email      @relation(fields: [emailId], references: [id], onDelete: Cascade)

  @@index([automationId])
  @@index([emailId])
  @@index([order])
}

// NextAuth.js Models
model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// New model for publication members
model PublicationMember {
  id            String          @id @default(cuid())
  role          PublicationRole @default(EDITOR)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt

  // Relations
  userId        String
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  publicationId String
  publication   Publication @relation(fields: [publicationId], references: [id], onDelete: Cascade)

  @@unique([userId, publicationId])
  @@index([userId])
  @@index([publicationId])
}

// Add this model to your schema
model Newsletter {
  id          String   @id @default(cuid())
  name        String
  status      EmailStatus @default(DRAFT)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  publicationId String
  publication  Publication @relation(fields: [publicationId], references: [id], onDelete: Cascade)
  emails      Email[]
  analytics   NewsletterAnalytics?

  @@index([publicationId])
  @@index([status])
}

model NewsletterAnalytics {
  id            String   @id @default(cuid())
  totalEmails   Int      @default(0)
  totalOpens    Int      @default(0)
  uniqueOpens   Int      @default(0)
  totalClicks   Int      @default(0)
  uniqueClicks  Int      @default(0)
  bounces       Int      @default(0)
  unsubscribes  Int      @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  newsletterId  String   @unique
  newsletter    Newsletter @relation(fields: [newsletterId], references: [id], onDelete: Cascade)

  @@index([createdAt])
}
